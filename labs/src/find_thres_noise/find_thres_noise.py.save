#!/usr/bin/env python

import rospy
from std_msgs.msg import Float64
import numpy as np


class Probabilities_estimator:
    def __init__(self):
        self.feature_mean_sub = rospy.Subscriber('/feature_mean', Float64, self.feature_mean_callback)
        # Initialize the feature_mean
        self.feature_mean = None
        self.start_time = rospy.get_time()
        self.rate = rospy.Rate(10)
        self.record = np.array([])

    def feature_mean_callback(self,msg):
        self.feature_mean = msg.data
        record = np.append(record, self.feat
        elapsed_time = rospy.get_time() - start_time
        if elasped_time <= 60:
            
        #rospy.loginfo("feature_mean_callback with data:{}".format(msg.data))
def main():
    rospy.init_node('find_thres_noise')
    estimator = Probabilities_estimator()
    timer = rospy.Timer(rospy.Duration(0.1), estimator.feature_mean_callback)
    rospy.spin()
    rospy.loginfo('done')

if __name__=='__main__':
    main()
